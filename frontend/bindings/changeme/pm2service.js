// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * PM2Service handles all PM2 operations
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * AddProcess adds a new process to PM2
 * @param {$models.ProcessConfig | null} config
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function AddProcess(config) {
    let $resultPromise = /** @type {any} */($Call.ByID(3944241078, config));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * DeleteProcess deletes a process from PM2
 * @param {any} processId
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function DeleteProcess(processId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3080829698, processId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetLogs retrieves logs for a specific process
 * @param {any} id
 * @returns {Promise<$models.LogData | null> & { cancel(): void }}
 */
export function GetLogs(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(3173972357, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetMetrics calculates and returns aggregated metrics
 * @returns {Promise<$models.MetricsData | null> & { cancel(): void }}
 */
export function GetMetrics() {
    let $resultPromise = /** @type {any} */($Call.ByID(1999670315));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * GetPM2Version retrieves PM2 version information
 * @returns {Promise<$models.PM2VersionInfo | null> & { cancel(): void }}
 */
export function GetPM2Version() {
    let $resultPromise = /** @type {any} */($Call.ByID(400493671));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType7($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * ListProcesses retrieves all PM2 processes
 * @returns {Promise<$models.ProcessInfo[]> & { cancel(): void }}
 */
export function ListProcesses() {
    let $resultPromise = /** @type {any} */($Call.ByID(1687570995));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType9($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * RestartAllProcesses restarts all PM2 processes
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function RestartAllProcesses() {
    let $resultPromise = /** @type {any} */($Call.ByID(3044283317));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * RestartProcess restarts a PM2 process
 * @param {any} id
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function RestartProcess(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(2524949450, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * StartAllProcesses starts all PM2 processes
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function StartAllProcesses() {
    let $resultPromise = /** @type {any} */($Call.ByID(2260572278));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * StartProcess starts a PM2 process
 * @param {any} id
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function StartProcess(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(4010452023, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * StopAllProcesses stops all PM2 processes
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function StopAllProcesses() {
    let $resultPromise = /** @type {any} */($Call.ByID(1838046614));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * StopProcess stops a PM2 process
 * @param {any} id
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function StopProcess(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(2492013207, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * UpdateProcess updates an existing process configuration
 * @param {any} processId
 * @param {$models.ProcessConfig | null} config
 * @returns {Promise<$models.OperationResult | null> & { cancel(): void }}
 */
export function UpdateProcess(processId, config) {
    let $resultPromise = /** @type {any} */($Call.ByID(1439448800, processId, config));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.OperationResult.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $models.LogData.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = $models.MetricsData.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
const $$createType6 = $models.PM2VersionInfo.createFrom;
const $$createType7 = $Create.Nullable($$createType6);
const $$createType8 = $models.ProcessInfo.createFrom;
const $$createType9 = $Create.Array($$createType8);
