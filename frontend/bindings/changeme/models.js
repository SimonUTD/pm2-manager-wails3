// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * LogData represents process logs
 */
export class LogData {
    /**
     * Creates a new LogData instance.
     * @param {Partial<LogData>} [$$source = {}] - The source object to create the LogData.
     */
    constructor($$source = {}) {
        if (!("stdout" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["stdout"] = [];
        }
        if (!("stderr" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["stderr"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LogData instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {LogData}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("stdout" in $$parsedSource) {
            $$parsedSource["stdout"] = $$createField0_0($$parsedSource["stdout"]);
        }
        if ("stderr" in $$parsedSource) {
            $$parsedSource["stderr"] = $$createField1_0($$parsedSource["stderr"]);
        }
        return new LogData(/** @type {Partial<LogData>} */($$parsedSource));
    }
}

/**
 * MetricsData represents aggregated metrics
 */
export class MetricsData {
    /**
     * Creates a new MetricsData instance.
     * @param {Partial<MetricsData>} [$$source = {}] - The source object to create the MetricsData.
     */
    constructor($$source = {}) {
        if (!("totalProcesses" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["totalProcesses"] = 0;
        }
        if (!("running" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["running"] = 0;
        }
        if (!("errored" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["errored"] = 0;
        }
        if (!("stopped" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["stopped"] = 0;
        }
        if (!("totalMemory" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["totalMemory"] = 0;
        }
        if (!("totalCPU" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["totalCPU"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new MetricsData instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {MetricsData}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new MetricsData(/** @type {Partial<MetricsData>} */($$parsedSource));
    }
}

/**
 * OperationResult represents the result of PM2 operations
 */
export class OperationResult {
    /**
     * Creates a new OperationResult instance.
     * @param {Partial<OperationResult>} [$$source = {}] - The source object to create the OperationResult.
     */
    constructor($$source = {}) {
        if (!("success" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["success"] = false;
        }
        if (!("message" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["message"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["error"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new OperationResult instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {OperationResult}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new OperationResult(/** @type {Partial<OperationResult>} */($$parsedSource));
    }
}

/**
 * PM2VersionInfo represents PM2 version information
 */
export class PM2VersionInfo {
    /**
     * Creates a new PM2VersionInfo instance.
     * @param {Partial<PM2VersionInfo>} [$$source = {}] - The source object to create the PM2VersionInfo.
     */
    constructor($$source = {}) {
        if (!("version" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["version"] = "";
        }
        if (!("installed" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["installed"] = false;
        }
        if (!("message" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["message"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PM2VersionInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PM2VersionInfo}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PM2VersionInfo(/** @type {Partial<PM2VersionInfo>} */($$parsedSource));
    }
}

/**
 * ProcessConfig represents configuration for adding/updating a process
 */
export class ProcessConfig {
    /**
     * Creates a new ProcessConfig instance.
     * @param {Partial<ProcessConfig>} [$$source = {}] - The source object to create the ProcessConfig.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("script" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["script"] = "";
        }
        if (!("cwd" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["cwd"] = "";
        }
        if (!("args" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["args"] = "";
        }
        if (!("autoStart" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["autoStart"] = false;
        }
        if (!("instances" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["instances"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ProcessConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ProcessConfig}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ProcessConfig(/** @type {Partial<ProcessConfig>} */($$parsedSource));
    }
}

/**
 * ProcessInfo represents PM2 process information
 */
export class ProcessInfo {
    /**
     * Creates a new ProcessInfo instance.
     * @param {Partial<ProcessInfo>} [$$source = {}] - The source object to create the ProcessInfo.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("status" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["status"] = "";
        }
        if (!("cpu" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["cpu"] = 0;
        }
        if (!("memory" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["memory"] = 0;
        }
        if (!("uptime" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["uptime"] = 0;
        }
        if (!("startedAt" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["startedAt"] = "";
        }
        if (!("runtime" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["runtime"] = "";
        }
        if (!("pid" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["pid"] = 0;
        }
        if (!("user" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["user"] = "";
        }
        if (!("command" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["command"] = "";
        }
        if (!("script" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["script"] = "";
        }
        if (!("autoStart" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["autoStart"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ProcessInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ProcessInfo}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ProcessInfo(/** @type {Partial<ProcessInfo>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
