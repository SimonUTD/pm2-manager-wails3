name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Wails3
      run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --install || echo "Xcode command line tools already installed"

    - name: Check dependencies
      run: wails3 doctor

    - name: Test build
      run: wails3 build

    - name: Run Go tests
      run: |
        go test -v ./... || echo "No tests found"

    - name: Verify build artifacts
      run: |
        ls -la
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ls -la *.exe || echo "No exe files found"
        else
          ls -la pm2-manager-wails3 || ls -la pm2-manager || echo "No binary found"
        fi
      shell: bash

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: |
        $(go env GOPATH)/bin/golangci-lint run --timeout=5m || echo "Linting completed with issues"

    - name: Check Go mod
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum || echo "go.mod/go.sum needs updating"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Check frontend formatting
      run: |
        cd frontend
        npm run format:check || echo "Frontend formatting check completed"

    - name: Frontend security audit
      run: |
        cd frontend
        npm audit --audit-level=moderate || echo "Security audit completed with warnings"
