name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows-amd64
          - os: macos-latest
            name: macos-universal
          - os: ubuntu-latest
            name: linux-amd64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Wails3
      run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.1-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        xcode-select --install || echo "Xcode command line tools already installed"

    - name: Check dependencies
      run: wails3 doctor

    - name: Build application
      run: wails3 build

    - name: Package application
      run: wails3 package

    - name: Create distribution package
      run: |
        mkdir -p dist/pm2-manager-${{ matrix.name }}

        # Copy built application
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp bin/*.exe dist/pm2-manager-${{ matrix.name }}/
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cp -r bin/*.app dist/pm2-manager-${{ matrix.name }}/ || cp bin/* dist/pm2-manager-${{ matrix.name }}/
        else
          cp bin/* dist/pm2-manager-${{ matrix.name }}/
        fi

        # Copy documentation
        cp README.md dist/pm2-manager-${{ matrix.name }}/
        cp README_zh.md dist/pm2-manager-${{ matrix.name }}/
        cp CHANGELOG.md dist/pm2-manager-${{ matrix.name }}/

        # Create installation instructions
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cat > dist/pm2-manager-${{ matrix.name }}/INSTALL.txt << 'EOF'
        PM2 Manager Installation Instructions
        ====================================

        1. Prerequisites:
           - Ensure Node.js is installed
           - Install PM2 globally: npm install -g pm2

        2. Installation:
           - Extract this archive to your desired location
           - Double-click the .exe file to run the application

        3. Usage:
           - The application will automatically detect your PM2 installation
           - If PM2 is not found, install it using: npm install -g pm2

        For more information, see README.md
        EOF
        else
          cat > dist/pm2-manager-${{ matrix.name }}/install.sh << 'EOF'
        #!/bin/bash
        echo "PM2 Manager Installation"
        echo "======================="
        echo ""

        # Check for PM2
        if ! command -v pm2 &> /dev/null; then
            echo "⚠ PM2 not found. Installing PM2..."
            if command -v npm &> /dev/null; then
                npm install -g pm2
                echo "✓ PM2 installed successfully"
            else
                echo "✗ npm not found. Please install Node.js and npm first"
                echo "  Then run: npm install -g pm2"
                exit 1
            fi
        else
            echo "✓ PM2 is already installed"
        fi

        # Make executable
        chmod +x pm2-manager* 2>/dev/null || chmod +x *.app/Contents/MacOS/* 2>/dev/null || true
        echo "✓ Made application executable"

        echo ""
        echo "Installation complete! Run the application to start PM2 Manager"
        EOF
          chmod +x dist/pm2-manager-${{ matrix.name }}/install.sh
        fi
      shell: bash

    - name: Create archive
      run: |
        cd dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          powershell -command "Compress-Archive -Path 'pm2-manager-${{ matrix.name }}' -DestinationPath 'pm2-manager-${{ matrix.name }}.zip'"
        else
          tar -czf pm2-manager-${{ matrix.name }}.tar.gz pm2-manager-${{ matrix.name }}/
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pm2-manager-${{ matrix.name }}
        path: |
          dist/pm2-manager-${{ matrix.name }}.zip
          dist/pm2-manager-${{ matrix.name }}.tar.gz
        retention-days: 30


