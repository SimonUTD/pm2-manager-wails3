name: Release

# 触发条件：仅在创建 v 开头的标签时运行
on:
  push:
    tags:
      - 'v*'

jobs:
  # 第一步：构建所有平台的应用
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            asset_name: pm2-manager-windows-amd64.exe
            asset_path: build/bin/pm2-manager.exe
            build_command: wails3 task package
            
          - os: macos-latest
            asset_name: pm2-manager-macos-universal.dmg
            asset_path: build/bin/pm2-manager.dmg
            build_command: wails3 task package:universal

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies and build
      run: |
        go mod tidy
        go install github.com/wailsapp/wails/v3/cmd/wails3@latest
        ${{ matrix.build_command }}

    - name: Create DMG for macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install create-dmg
        create-dmg \
          --volname "PM2 Manager" \
          --app-drop-link 600 185 \
          "build/bin/pm2-manager.dmg" \
          "build/bin/pm2-manager.app"
          
    # 将构建好的文件作为 artifact 上传，供下一个 Job 使用
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_path }}

  # 第二步：创建 Release 并上传所有文件
  release:
    # 等待 build Job 全部成功后运行
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # 必须，用于创建 Release

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      # 下载到 artifacts 文件夹
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -R artifacts

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        # 从触发的 tag (例如 'v1.0.0') 中获取版本号
        tag_name: ${{ github.ref_name }}
        # 将 tag 作为 Release 的标题
        name: Release ${{ github.ref_name }}
        # 设置为 false，表示是正式版，不是预发布
        prerelease: false
        # 设置为 false，表示直接发布，不是草稿
        draft: false
        # 上传 artifacts 目录下所有文件夹里的所有文件
        files: artifacts/**/*