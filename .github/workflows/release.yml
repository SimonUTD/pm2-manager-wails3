name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # STEP 1: Build on all platforms
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows 配置
          - os: 'windows-latest'
            platform: 'windows/amd64'
            asset_name_suffix: 'windows-amd64.exe'
            # 这是根据你 wails.json 确认的正确路径
            asset_path: 'build/bin/pm2-manager.exe'
            wails_os: 'windows'
            
          # macOS 配置
          - os: 'macos-latest'
            platform: 'darwin/universal'
            asset_name_suffix: 'macos-universal.dmg'
            # 这是打包成 dmg 后的最终路径
            asset_path: 'pm2-manager.dmg'
            wails_os: 'darwin'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Tidy Go modules
      run: go mod tidy

    - name: Install Wails3 CLI
      run: go install github.com/wailsapp/wails/v3/cmd/wails3@latest

    - name: Check dependencies
      run: wails3 doctor

    - name: Build Wails project (macOS)
      if: matrix.os == 'macos-latest'
      run: wails3 task ${{ matrix.wails_os }}:package:universal

    - name: Build Wails project (Windows)
      if: matrix.os == 'windows-latest'
      run: wails3 task ${{ matrix.wails_os }}:package

    - name: Create DMG for macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install create-dmg
        create-dmg \
          --volname "PM2 Manager" \
          --app-drop-link 600 185 \
          "pm2-manager.dmg" \
          "$GITHUB_WORKSPACE/build/bin/pm2-manager.app"

    - name: Verify build artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (!(Test-Path "${{ matrix.asset_path }}")) {
          Write-Host "❌ Build artifact not found: ${{ matrix.asset_path }}"
          Write-Host "📁 Available files:"
          Get-ChildItem -Recurse -Include "*.exe","*.dmg","*.app" | Select-Object -First 10
          exit 1
        }
        Write-Host "✅ Found artifact: ${{ matrix.asset_path }}"
      shell: powershell

    - name: Verify build artifacts (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ ! -f "${{ matrix.asset_path }}" ]; then
          echo "❌ Build artifact not found: ${{ matrix.asset_path }}"
          echo "📁 Available files:"
          find . -name "*.exe" -o -name "*.dmg" -o -name "*.app" | head -10
          exit 1
        fi
        echo "✅ Found artifact: ${{ matrix.asset_path }}"

    - name: Upload artifact for release job
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build
        path: ${{ matrix.asset_path }}

  # STEP 2: Create the GitHub Release
  release:
    needs: build
    runs-on: ubuntu-latest
    # 👈 FIX: Added permissions block to fix the 403 error
    permissions:
      contents: write

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Reorganize artifacts
      run: |
        mkdir -p release-files
        find artifacts -type f -exec cp {} release-files/ \;
        ls -la release-files/

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: release-files/*