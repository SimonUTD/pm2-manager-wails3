name: Release

# ‚¨áÔ∏è IMPORTANT: This workflow now ONLY runs when you push a tag like "v1.0.0"
on:
  push:
    tags:
      - 'v*'

jobs:
  # STEP 1: Build on all platforms
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows build
          - os: windows-latest
            asset_name: pm2-manager-windows-amd64.exe
            asset_path: build/bin/pm2-manager.exe # This path is correct for Windows
            build_command: wails3 task package
            
          # macOS build
          - os: macos-latest
            asset_name: pm2-manager-macos-universal.dmg
            asset_path: pm2-manager.dmg # üëà FIX: Corrected path for the DMG file
            build_command: wails3 task package:universal

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go & Node.js
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies and build
      run: |
        go mod tidy
        go install github.com/wailsapp/wails/v3/cmd/wails3@latest
        ${{ matrix.build_command }}

    - name: Create DMG for macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install create-dmg
        # This command creates pm2-manager.dmg in the root of the project
        create-dmg \
          --volname "PM2 Manager" \
          --app-drop-link 600 185 \
          "pm2-manager.dmg" \
          "$GITHUB_WORKSPACE/build/bin/pm2-manager.app"
          
    - name: Upload artifact for release job
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_path }}

  # STEP 2: Create the GitHub Release
  release:
    needs: build
    runs-on: ubuntu-latest
    # üëà FIX: Added permissions block to fix the 403 error
    permissions:
      contents: write

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -R artifacts

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        # This uses the tag you push (e.g., "v1.0.1") as the release version
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        # Setting draft & prerelease to false creates a final, public release
        draft: false
        prerelease: false
        # This uploads all files from the artifacts directory
        files: artifacts/**/*